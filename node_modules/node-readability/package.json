{
  "name": "node-readability",
  "version": "1.0.0",
  "author": {
    "name": "Zihua Li"
  },
  "description": "Turning any web page into a clean view.",
  "homepage": "https://github.com/luin/node-readability",
  "repository": {
    "type": "git",
    "url": "git://github.com/luin/node-readability.git"
  },
  "scripts": {
    "test": "mocha -R spec"
  },
  "main": "./src/readability",
  "licenses": [
    {
      "type": "Apache License 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    }
  ],
  "dependencies": {
    "jsdom": "^1.0.3",
    "request": "~2.40.0",
    "encoding": "~0.1.7"
  },
  "engines": [
    "node >=0.8.0"
  ],
  "keywords": [
    "readability"
  ],
  "devDependencies": {
    "mocha": "~1.8.2",
    "should": "~2.1.1",
    "nock": "~0.27.1"
  },
  "readme": "# Readability\n\nTurn any web page into a clean view. This module is based on arc90's readability project.\n\n[![Build Status](https://travis-ci.org/luin/node-readability.png?branch=master)](https://travis-ci.org/luin/node-readability)\n\n## Features\n1. Optimized for more websites.\n2. Supporting HTML5 tags(`article`, `section`) and Microdata API.\n3. Focusing on both accuracy and performance. 4x times faster than arc90's version.\n3. Supporting encodings such as GBK and GB2312.\n4. Converting relative urls to absolute for images and links automatically(Thank [Guillermo Baigorria](https://github.com/gbaygon) & [Tom Sutton](https://github.com/tomsutton1984)).\n\n## Example\n\n[Before](https://raw.githubusercontent.com/luin/node-readability/master/examples/before.png) -> [After](https://raw.githubusercontent.com/luin/node-readability/master/examples/after.png)\n\n## Install\n\n    npm install node-readability\n\n## Usage\n\n`read(html [, options], callback)`\n\nWhere\n\n  * **html** url or html code.\n  * **options** is an optional options object\n  * **callback** is the callback to run - `callback(error, article, meta)`\n\nExample\n```javascript\n    var read = require('node-readability');\n\n    read('http://howtonode.org/really-simple-file-uploads', function(err, article, meta) {\n      // Main Article\n      console.log(article.content);\n      // Title\n      console.log(article.title);\n\n      // HTML Source Code\n      console.log(article.html);\n      // DOM\n      console.log(article.document);\n\n      // Response Object from Request Lib\n      console.log(meta);\n\n      // Close article to clean up jsdom and prevent leaks\n      article.close();\n    });\n```\n**NB** If the page has been marked with charset other than utf-8, it will be converted automatically. Charsets such as GBK, GB2312 is also supported.\n\n## Options\n\nnode-readability will pass the options to [request](https://github.com/mikeal/request) directly.\nSee request lib to view all available options.\n\nnode-readability has two additional options:\n\n- `cleanRulers` which allow set your own validation rule for tags.\n\nIf true rule is valid, otherwise no.\noptions.cleanRulers = [callback(obj, tagName)]\n```javascript\nread(url, {\n        cleanRulers : [\n          function(obj, tag) {\n            if(tag === 'object') {\n              if(obj.getAttribute('class') === 'BrightcoveExperience') {\n                return true;\n              }\n            }\n          }\n        ]\n      }, function(err, article, response) {});\n```\n\n- `preprocess` which should be a function to check or modify downloaded source before passing it to readability.\n\noptions.preprocess = callback(source, response, content_type, callback);\n```javascript\nread(url, {\n  preprocess: function(source, response, content_type, callback) {\n    if (source.length > maxBodySize) {\n      return callback(new Error('too big'));\n    }\n    callback(null, source);\n  }, function(err, article, response) {\n    //...\n  });\n\n```\n\n\n## article object\n\n### content\n\nThe article content of the web page. Return `false` if failed.\n\n### title\n\nThe article title of the web page. It's may not same to the text in the `<title>` tag.\n\n### html\n\nThe original html of the web page.\n\n### document\nThe document of the web page generated by jsdom. You can use it to access the DOM directly(for example, `article.document.getElementById('main')`).\n\n## meta object\n\nresponse object from request lib. If you need to get current url after all redirect or get some headers it can be useful.\n\n## Why not Cheerio\n\nThis lib is using jsdom to parser HTML instead of cheerio because some data such as image size and element visibility isn't able to acquire when using cheerio, which will significantly affect the result. \n\n## Contributors\n\nhttps://github.com/luin/node-readability/graphs/contributors\n\n## License\n\nThis code is under the Apache License 2.0.  http://www.apache.org/licenses/LICENSE-2.0\n\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/luin/node-readability/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/luin/node-readability/issues"
  },
  "_id": "node-readability@1.0.0",
  "dist": {
    "shasum": "666531614ee95d2c037f0fd0bd9f6a4051c6acac"
  },
  "_from": "node-readability@^1.0.0",
  "_resolved": "https://registry.npmjs.org/node-readability/-/node-readability-1.0.0.tgz"
}
