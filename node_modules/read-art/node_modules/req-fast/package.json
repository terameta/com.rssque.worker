{
  "name": "req-fast",
  "version": "0.2.4",
  "description": "This module is designed to be the fast, lightweight way to fetch the web content(HTML stream).",
  "main": "lib/req.js",
  "scripts": {
    "test": "./node_modules/.bin/mocha -R spec -t 30000"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/Tjatse/req-fast.git"
  },
  "keywords": [
    "request",
    "http",
    "client",
    "fetch",
    "grab",
    "download"
  ],
  "author": {
    "name": "Tjatse"
  },
  "license": "Apache, Version 2.0",
  "bugs": {
    "url": "https://github.com/Tjatse/req-fast/issues"
  },
  "engines": [
    "node >= 0.8.0"
  ],
  "dependencies": {
    "tunnel": "^0.0.3",
    "URIjs": "^1.14.0",
    "random-ua": "^0.0.6",
    "iconv-lite": "^0.4.4"
  },
  "devDependencies": {
    "mocha": "^1.21.4",
    "chai": "^1.9.1"
  },
  "readmeFilename": "README.md",
  "readme": "# req-fast\n[![Build Status](https://travis-ci.org/Tjatse/req-fast.svg)](https://travis-ci.org/Tjatse/req-fast) [![NPM version](https://badge.fury.io/js/req-fast.svg)](http://badge.fury.io/js/req-fast)\n\nThis module is designed to be the fast, lightweight way to fetch the web content(HTML stream) from specific server. it supports:\n- Follow Redirects\n- Automatic Decoding Content Encodings(Avoid Messy Codes, Especially Chinese)\n- Cookies\n- JSON Response Auto Handling\n- Gzip/Deflate Encoding(Automatic Decompress)\n- Proxy\n\n## Installation\n```\nnpm install req-fast\n```\n\n## Usage\n```javascript\nvar req = require('req-fast');\nreq(options, callback);\n```\n### Options\nWhen options is instance of **String**, it means the URL of server that to be requested.\n```javascript\nreq('http://www.google.com', function(err, resp){\n  // code goes here...\n});\n```\n\nOtherwise it should be an object, including:\n  - **uri || url** A url to which the request is sent.\n  - **method** Http method, `GET` as default, but if `data` was set and this value was undefined, it will be `POST`. And it could be one of *OPTIONS*, *GET*, *HEAD*, *POST*, *PUT*, *PATCH*, *DELETE*, *TRACE* and *CONNECT*.\n  - **timeout** Set a timeout (in milliseconds) for the request.\n  - **dataType** Type of data that you are expecting send to server, this property effects on POST, PUT, PATCH `method` only. It could be below values:\n    - **json** `content-type` equals `application/json`.\n    - **form** `content-type` equals `application/x-www-form-urlencoded`.\n  - **data** Data to be sent to the server, it should be key/value pairs. If the method is not set to `POST`, it will be converted to a query string, and appended to the `url`.\n  - **agent** A value indicating whether automatic generating browser-like `user-agent`, i.e.:`Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.101 Safari/537.36`, `true` as default.\n\n    > Once `user-agent` was generated, the `Process finished with exit code 0` thing will not happen unless triggered manually, i.e.: COMMAND+C or `process.exit(0)`.\n  - **charset** Set charset of content encodings if necessary.\n\n    > This option takes top priority of decoding chunks, if not set, the `charset` in `response.headers['content-type']` will be used at first, then the `charset` on `<meta ... />`.\n  - **disableRedirect** A value indicating whether disable following redirect or not, if this value was set to `true`, the `maxRedirects` will has no effect.\n  - **maxRedirects** The maximum number of redirects to follow(3 as default).\n  - **disableGzip** Request compressed content from server and automatic decompress response content, if this option sets to `true`, this feature will be disabled.\n  - **trackCookie** A value indicating whether gathering all the cookies when following redirect or not, `false` by default, `false` means gathering the cookie of last request only.\n  - **cookies** It should be key/value pairs.\n  - **headers** Http headers, it should be key/value pairs, and some default values were:\n\n    ```javascript\n    {\n      'connection': 'keep-alive',\n      'accept': 'text/html, text/javascript, application/json, application/xhtml+xml, application/xml;q=0.9, */*;q=0.8',\n      'pragma': 'no-cache',\n      'cache-control': 'no-cache'\n    }\n    ```\n    > You can override those in the `headers`.\n  - **proxy** The proxy including all the options from [tunnel](https://www.npmjs.org/package/tunnel) proxy:\n    - **host** A domain name or IP address of the server to issue the proxy request to.\n    - **port** Port of remote proxy server..\n    - **localAddress** Local interface if necessary.\n    - **proxyAuth** Basic authorization for proxy server if necessary, i.e. `username:password`.\n    - **headers** An object containing request headers.\n\n### Callback\nFunction to be called if the request succeeds or fails. The function gets passed two argument:\n  - **error** The `Error` instance. if succeeds, this value should be `null`. If status is not okay, `error.message` should be one of [http.STATUSCODES](http://nodejs.org/api/http.html#http_http_status_codes).\n  - **response** the response object, including:\n    - **body** The response body. If `response.headers['content-type']` equals `application/json`, the data(response.body) back from server will be parsed as JSON automatic, otherwise is `String`.\n    - **cookies** The response cookies(key/value pairs).\n    - **headers** The response headers(key/value pairs).\n    - **redirects** The urls redirect(Array).\n    - **statusCode** The response status code.\n\n> see test or examples folder for a complete example\n\n## Streaming\nStream is amazing in node.js, if you are interesting on it, read [John's Blog](http://ejohn.org/blog/node-js-stream-playground/). You can add listeners on the returning Stream if you want.\n```javascript\nvar rs = req([options]);\nrs.on('data', function(chunk){\n  // ...\n});\nrs.on('end', function(resp){\n  // ...\n});\nrs.on('error', function(error){\n  // ...\n});\n```\n### Pipe to file\nIn my project, I will download millions of files from servers, using `pipe` could improving performance, the file downloading from server chunk by chunk, but not read whole file to memory then download once, it sucks.\n```javascript\nvar fs = require('fs');\nreq('http://example.com/beauty.gif').pipe(fs.createWriteStream('download/001.gif'));\n```\n\n## Http Status\nAll the http statuses will be handled, but you'd better check status carefully.\n```javascript\nreq('http://example.com', function(err, resp){\n  if(err){\n    // get status error;\n  }\n  // statusCode always exist except STREAM `error` was caught.\n  var status = resp && resp.statusCode;\n})\n```\n\n## Proxy\n```javascript\nreq({\n  url: 'http://example.com',\n  proxy: {\n    host: '127.0.0.1',  // host\n    port: 8082,         // port\n    proxyAuth: 'user:password'  // authentication if necessary.\n  }\n}, function(err, resp){\n  // code goes here\n});\n```\n\n## Performance\nIt's comparing with `request` module, in order to avoid the influence of network, all the requests are sent to localhost.\nThe performance test is just for reference, it's not trustworthy ^^.\n- **Install performance test modules**\n\n  ```\n  npm install request async progress memwatch\n  ```\n- **Start server**\n\n  ```\n  node performance_test/server.js\n  ```\n- **Time**\n  1000 requests are sent to server one by one.\n  **request**\n  ```\n  node performance_test/time.js request\n  ```\n  **req-fast**\n  ```\n  node performance_test/time.js req-fast\n  ```\n  **Results(A 0.1ms to 0.2ms deviation)**\n\n  |Server Status  |Module |Milliseconds/q |\n  |:--------------|:------|:------------|\n  |opening        |request|1.958        |\n  |opening        |req-fast|1.752       |\n  |closed         |request|1.416        |\n  |closed         |req-fast|1.121       |\n\n- **Memory**\n  **request**\n  10 requests for example.\n  ```\n  node performance_test/memory.js request 10\n  ```\n  **req-fast**\n  ```\n  node performance_test/memory.js req-fast 10\n  ```\n  **Results(A 500 to 1000 bytes deviation)**\n\n  |Server Status  |Module |Requests |bytes changed/q |\n  |:--------------|:------|:--------|:---------|\n  |opening        |request|10 |131161.6        |\n  |opening        |req-fast|10  |139297.6        |\n  |closed         |request|10 |18467.2        |\n  |closed         |req-fast|10 |26529.6       |\n  |opening        |request|20 |68255.2       |\n  |opening        |req-fast|20  |78016.8        |\n  |closed         |request|20 |8500        |\n  |closed         |req-fast|20 |16234.4       |\n\n  GC effects these a lot, `req-fast` always take more memory(about 1KB), maybe it's used to automatic decompress encodings and decode Buffers by detected charset.\n\n## Tests\nMost tests' requests are sent to [httpbin](http://httpbin.org), so if you wanna run the test, please make sure you can resolve the host(httpbin).\nRun test:\n```\nnpm test\n```\n\n## Thanks\nAppreciate to andris9. I've used [fetch](https://github.com/andris9/fetch) for a long time, it's very fast and simple to use.\n> my ES Spider needs speed up, [request](https://github.com/mikeal/request) is very powerful,\n> but too heavy/slow to me, and can not automatic decode encodings, especially Chinese.\n\nUnfortunately andris9 could not maintain his repository any more, it have bugs, also I can fix them\nin my project, but it's fussy. One more, I need a PROXY feature.\n\n## License\nCopyright 2014 Tjatse\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\n",
  "_id": "req-fast@0.2.4",
  "dist": {
    "shasum": "abb4b51d0aaad81c3a93a50e69547d4612dc931d"
  },
  "_from": "req-fast@^0.2.2",
  "_resolved": "https://registry.npmjs.org/req-fast/-/req-fast-0.2.4.tgz"
}
