{
  "name": "read-art",
  "version": "0.3.1",
  "description": "Scrape article from any page, automatically, make web page readability.",
  "main": "index.js",
  "scripts": {
    "test": "./node_modules/.bin/mocha -R spec -t 10000"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/Tjatse/read-art.git"
  },
  "keywords": [
    "read",
    "scrape",
    "grab",
    "article",
    "spider",
    "readability"
  ],
  "author": {
    "name": "Tjatse"
  },
  "license": "Apache, Version 2.0",
  "bugs": {
    "url": "https://github.com/Tjatse/read-art/issues"
  },
  "engines": [
    "node >= 0.8.0"
  ],
  "dependencies": {
    "cheerio": "~0.17.0",
    "req-fast": "^0.2.2",
    "URIjs": "^1.14.0",
    "entities": "~1.1.1"
  },
  "devDependencies": {
    "mocha": "1.21.4",
    "chai": "1.9.1"
  },
  "readmeFilename": "README.md",
  "readme": "read-art [![NPM version](https://badge.fury.io/js/read-art.svg)](http://badge.fury.io/js/read-art) [![Build Status](https://travis-ci.org/Tjatse/node-readability.svg?branch=master)](https://travis-ci.org/Tjatse/node-readability)\n=========\n[![NPM](https://nodei.co/npm/read-art.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/read-art/)\n\n1. Readability reference to Arc90's.\n2. Scrape article from any page (automatically).\n3. Make any web page readable, no matter Chinese or English.\n\n> *快速抓取网页文章标题和内容，适合node.js爬虫使用，服务于ElasticSearch。*\n\n## Features\n- Faster Than Any Readability Module\n- High Performance - Less memory\n- Automatic Read Title & Content\n- Follow Redirects\n- Automatic Decoding Content Encodings(Avoid Messy Codes, Especially Chinese)\n- Gzip/Deflate Support\n- Proxy Support\n- Generate User-Agent\n\n## Performance\nIn my case, the indexed data is about **400 thousand per day**, **10 million per month**, and the maximize indexing speed is **35/second**, the memory cost are limited **under 100 megabytes**.\n\n**Pictures don't lie:**\n\n![image](screenshots/es.jpg)\n\n![image](screenshots/performance.jpg)\n\n![image](screenshots/mem.jpg)\n\n![image](screenshots/search.jpg)\n\nMaybe you wanna known:\n- All the spiders are managed by [PM2](https://github.com/Unitech/PM2) (I am currently working on that with friends, very welcome to use the amazing tool).\n- Loose coupling between Spiders, Indexers and Data, they're queued by NSQ.\n\n## Pure Example With High Availability\n[spider2](https://github.com/Tjatse/spider2)\n\n## Installation\n```javascript\nnpm install read-art\n```\n\n## Usage\n```javascript\nread(html/uri [, options], callback)\n```\n\nIt supports the definitions such as:\n\n  * **html/uri** Html or Uri string.\n  * **options** An optional options object, including:\n    - **output** The data type of article content, including: `html`, `text` or `json`. see more from [Output](#output)\n    - **killBreaks** A value indicating whether kill breaks, blanks, tab symbols(\\r\\t\\n) into one `<br />` or not, `true` by default.\n    - **options from [cheerio](https://github.com/cheeriojs/cheerio)**\n    - **options from [req-fast](https://github.com/Tjatse/req-fast)**\n  * **callback** The callback to run - `callback(error, article, options)`\n\n> See test or examples folder for a complete example\n\n### Simple Examples\n```javascript\nvar read = require('read-art');\n// read from google:\nread('http://google.com', function(err, art, options){\n    if(err){\n      throw err;\n    }\n    var title = art.title,      // title of article\n        content = art.content,  // content of article\n        html = art.html;        // whole original innerHTML\n});\n// or:\nread({\n    uri: 'http://google.com',\n    charset: 'utf8'\n  }, function(err, art, options){\n\n});\n// what about html?\nread('<title>node-art</title><body><div><p>hello, read-art!</p></div></body>', function(err, art, options){\n\n});\n// of course could be\nread({\n    uri: '<title>node-art</title><body><div><p>hello, read-art!</p></div></body>'\n  }, function(err, art, options){\n\n});\n```\n**CAUTION:** Title must be wrapped in a `<title>` tag and content must be wrapped in a `<body>` tag.\n\n## Output\nYou can wrap the content of article with different types, the `output` option could be:\n- **String**\n  One of `text`, `html` and `json`, `html` by default.\n- **Object**\n  Key-value pairs including:\n  - **type**\n    One of `text`, `html` and `json`.\n  - **stripSpaces**\n    A value indicates whether strip the tab symbols (\\r\\n\\t) or not, `false` by default.\n\n### text\nReturns the inner text, e.g.:\n```javascript\nread('http://example.com', {\n  output: 'text'\n}, function(err, art){\n  // art.content will be formatted as TEXT\n});\n// or\nread('http://example.com', {\n  output: {\n    type: 'text',\n    stripSpaces: true\n  }\n}, function(err, art){\n  // art.content will be formatted as TEXT\n});\n```\n\n### html\nReturns the inner HTML, e.g.:\n```javascript\nread('http://example.com', {\n  output: 'html'\n}, function(err, art){\n  // art.content will be formatted as HTML\n});\n// or\nread('http://example.com', {\n  output: {\n    type: 'html',\n    stripSpaces: true\n  }\n}, function(err, art){\n  // art.content will be formatted as HTML\n});\n```\n\n**Notes** Videos could be scraped now, the domains currently are supported: *youtube|vimeo|youku|tudou|56|letv|iqiyi|sohu|sina|163*.\n\n### json\nReturns the restful result, e.g.:\n```javascript\nread('http://example.com', {\n  output: 'json'\n}, function(err, art){\n  // art.content will be formatted as JSON\n});\n// or\nread('http://example.com', {\n  output: {\n    type: 'json',\n    stripSpaces: true\n  }\n}, function(err, art){\n  // art.content will be formatted as Array\n});\n```\n\nThe art.content will be an Array such as:\n```json\n[\n  { \"type\": \"img\", \"value\": \"http://example.com/jpg/site1/20140519/00188b1996f214e3a25417.jpg\" },\n  { \"type\": \"text\", \"value\": \"TEXT goes here...\" }\n]\n```\n\nUtil now there are only two types - *img* and *text*, the `src` of `img` element is absolute even if the original is a relative one.\n\n**Notes** The video sources of the sites are quite different, it's hard to fit all in a common way, I haven't find a good way to solve that, PRs are in demand.\n\n\n## You Should Known\n### Pass the charset manually to refrain from the crazy messy codes\n```javascript\nread('http://game.163.com/14/0506/10/9RI8M9AO00314SDA.html', {\n  charset: 'gbk'\n}, function(err, art){\n  // ...\n});\n```\n\n### Generate agent to simulate browsers\n```javascript\nread('http://example.com', {\n  agent: true // true as default\n}, function(err, art){\n  // ...\n});\n```\n\n### Use proxy to avoid being blocked.\n```javascript\nread('http://example.com', {\n  proxy: {\n    host: 'http://myproxy.com/',\n    port: 8081,\n    proxyAuth: 'user:password'\n  }\n}, function(err, art){\n  // ...\n});\n```\n\n## Test\n```\nnpm test\n```\n\n## Other Library\n### [luin/node-readability](https://github.com/luin/node-readability)\nluin/node-readability is an old Readability that be transformed from **Arc90**, easy to use, but the problem is - TOO SLOW. It was based on `jsdom`, so, the HTML must be written in strict mode, which means you can not make any mistake, e.g.:\n\n```html\n<P>Paragraphs</p>\n<p>My book name is <read-art></p>\n<div><p>Hey, dude!</div>\n```\n\nAll above will cause `hiberarchy errors`, more seriously, `jsdom` is a memory killer.\n\n### [bndr/node-read](https://github.com/bndr/node-read)\nI've contributed on this for a while, but it's hard to communicate with Vadim(we are in a different timezone), and we have very different ideas. So I decided to write it on my own.\n\n## TODO\n- [ ] get published time\n- [ ] get author\n- [ ] get source\n- [ ] pagination\n\n## License\nCopyright 2014 Tjatse\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\n",
  "_id": "read-art@0.3.1",
  "dist": {
    "shasum": "846aca4ad63d6de3b2466d8209a11fed9df758b4"
  },
  "_from": "read-art@",
  "_resolved": "https://registry.npmjs.org/read-art/-/read-art-0.3.1.tgz"
}
